Master Next.js 15 - Build and Deploy an E-Commerce Project



Section 01: Welcome !


01. Welcome in the course!

02. The project demo

03. Why this course ? The "missing guide" explained

04. Tech stack & prerequisites



Section 02: Environment setup


05. Section intro & objectives

06. Project creation
-open link: https://nextjs.org
-type command: npx create-next-app@latest .
-type command: npm run dev

07. Quick into to Docker & Docker compose

08. VSCode & GitHub Copilot (OPTIONAL)

09. Running Postgres using Docker
-install VSCode extension Container Tools
-open link: https://www.fadocodecamp.com/posts/yaml
-create docker-compose.yml file
-in docker-compose.yml file add docker options
-open link: https://www.docker.com
-download and install Docker application
-type command: docker compose up -d 
-type command: docker ps
-type command: docker exec -it b1b67d7dcd37 bash
-type command: psql -U postgres
-type command: \l
-type command: ctrl + d

10. Setting up prisma
-open link: https://www.prisma.io
-open link: https://www.npmjs.com/package/prisma
-open link: https://www.npmjs.com/package/@prisma/client
-type command: npm i prisma @prisma/client
-type command: npx prisma
-type command: npx prisma init
-in .env file update env variable DATABASE_URL
-type command: docker ps
-type command: npx prisma
-type command: npx prisma db push
-type command: docker stop b1b67d7dcd37
-type command: docker ps
-type command: npx prisma db push
-update password and port in docker-compose.yml file
-type command: docker compose down -v 
-type command: docker compose up -d
-type command: docker exec -it udemy-nextjs-course-ecommerce-project-pj-postgres-1 psql -U postgres -d next15_ecommerce
-type command: \conninfo
-type command: \q
-type command: npx prisma db push

11. Summary & Troubleshooting



Section 03: Product Listing Feature


12. File-based routing in app router
-open link: https://nextjs.org/docs/app
-type command: npm run dev
-open and update app/page.tsx component
-open route: http://localhost:3000
-open route: http://localhost:3000/products

13. Home page and server components in Next.js
-open link: https://nextjs.org/docs/app/getting-started/server-and-client-components
-in component app/page.tsx create HTML elements with Tailwind CSS classes
-open route: http://localhost:3000

14. Type safety and mock data
-create folder lib and mocks.ts file
-in mocks.ts file create type Product and variable const mockProducts
-in component app/page.tsx import variable mockProducts from mocks.ts file
-open route: http://localhost:3000

15. Display products in a grid
-create component product-card.tsx and function ProductCard
-in component app/page.tsx import component ProductCard from component product-card.tsx
-in jsx create div element with Tailwind CSS grid classes
-in div element invoke function mockProducts.map()
-open route: http://localhost:3000

16. Powerful image component
-open link: https://nextjs.org/docs/pages/api-reference/components/image
-in component product-card.tsx import component Image from package next/link
-in next.config.ts file add object images
-open route: http://localhost:3000

17. Responsive images
-in component product-card.tsx, in jsx add to component Image prop sizes
-open route: http://localhost:3000

18. More products, responsive grid, lazy loading
-in mocks.ts file add more products
-in component product-card.tsx add to component Image prop loading
-open route: http://localhost:3000

19. Format the price
-in folder lib create utils.ts file
-in utils.ts file create and export function formatPrice()
-open route: http://localhost:3000

20. Summary



Section 04: Database & product data


21. Section intro & objectives

22. Product model and migration
-type command: docker compose up -d
-in schema.prisma file create model Product
-type command: npx prisma migrate dev --name add_product
-in folder prisma check folder migrations
-open link: https://www.prisma.io/studio
-type command: npx prisma studio
-open route: http://localhost:5555

23. Product & categories: relations
-in schema.prisma file create model Category
-in model Product add relation for model Category
-type command: npx prisma migrate dev --name add_categories
-type command: npx prisma studio
-in folder prisma check folder migrations
-open route: http://localhost:5555

24. Creating and running a seeding script
-open link: https://www.npmjs.com/package/tsx
-type command: npm i -D tsx
-in folder prisma create seed.ts file
-in package.json file add command seed
-type command: npm run seed

25. Seeding: Prisma client, deleting data & inserting categories
-open link: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/instantiate-prisma-client
-open link: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql
-in seed.ts file add database seed script
-type command: npm run seed
-type command: npx prisma studio
-open route: http://localhost:5555 and check Category table

26. Seeding: Adding products
-in schema.prisma file update model Product
-type command: npx prisma migrate dev --name=update_product
-import type Product
-in seed.ts file create variable const products with type Product[]
-invoke loop for (const product of products)
-type command: npm run seed
-type command: npx prisma studio
-open route: http://localhost:5555 and check Category and Product tables

27. Next.js Prisma client quirk
-in folder lib create prisma.ts file
-in prisma.ts file add code from Prisma documentation

28. Fetching products in server component
-open link: https://nextjs.org/docs/app/getting-started/fetching-data
-in component layout.tsx update property title
-in component app/page.tsx make function HomePage() async
-import object prisma from prisma.ts file
-create variable const products
-in jsx invoke function products.map()
-in component product-card.tsx import type Product from folder prisma
-in jsx add conditional rendering product.image &&
-open route: http://localhost:3000

29. Summary



Section 05: Adding shadcn/ui, suspense, pagination


30. What is shadcn/ui ?

31. Setting up & understanding shadcn/ui basics
-open link: https://ui.shadcn.com
-open link: https://ui.shadcn.com/docs/installation/next
-type command: npx shadcn@latest init
-type command: npx shadcn@latest add card badge skeleton
-open folder components/ui to see created components
-open globals.css file to see updates that were added by shadcn library
-open utils.ts file to see function cn() that was added by shadcn library

32. Enhancing the product card
-in component product-card.tsx import card components from component ui/card.tsx
-in jsx replace HTML elements with shadcn components
-open route: http://localhost:3000

33. What's loading UI ?
-open link: https://nextjs.org/docs/14/app/building-your-application/routing/loading-ui-and-streaming

34. Creating the loading UI for products
-open link: https://nextjs.org/learn/dashboard-app/navigating-between-pages
-open link: https://nextjs.org/docs/pages/api-reference/components/link
-open link: https://nextjs.org/docs/app/api-reference/file-conventions/loading
-open link: https://tailwindcss.com/docs/animation
-in component layout.tsx import component Link from package next/link
-open route: http://localhost:3000
-open route: http://localhost:3000/products
-create component loading.tsx
-in component app/page.tsx invoke function await new Promise()
-open route: http://localhost:3000
-open route: http://localhost:3000/products

35. Adding loading skeleton for products
-create component product-card-skeleton.tsx
-in component product-card-skeleton.tsx import component Skeleton from component skeleton.tsx 
-import card components from component card.tsx
-in component loading.tsx import component ProductCardSkeleton from component product-card-skeleton.tsx
-in div element with Tailwind CSS grid classes invoke function Array.from()
-open route: http://localhost:3000

36. Paginating products
-in component app/page.tsx create type SearchParams
-add to function HomePage() parameter props with type
-add pagination logic
-open route: http://localhost:3000
-open route: http://localhost:3000/?page=1
-open route: http://localhost:3000/?page=2
-open route: http://localhost:3000/?page=3

37. Adding pagination links
-open link: https://ui.shadcn.com/docs/components/pagination
-type command: npx shadcn@latest add pagination
-in component pagination.tsx import component Link from package next/link
-import type for component Link
-in component app/page.tsx import pagination components from component pagination.tsx
-invoke function await Promise.all()
-in jsx add pagination components
-create variable const totalPages
-open route: http://localhost:3000

38. Search params & dynamic APIs
-open link: https://nextjs.org/docs/messages/sync-dynamic-apis

39. Using Suspense with searchParams
-create component products-skeleton.tsx
-in component products-skeleton.tsx import component ProductCardSkeleton from component product-card-skeleton.tsx
-in component loading.tsx import component ProductsSkeleton from component products-skeleton.tsx
-open link: https://react.dev/reference/react/Suspense
-in component app/page.tsx create async function Products()
-import component Suspense from package react
-import component ProductsSkeleton from component products-skeleton.tsx
-update pagination logic
-in component HomePage() add component Suspense with two props
-in component Suspense add component Products
-open route: http://localhost:3000

40. Summary



Section 06: Product page & dynamic routes


41. Using and understanding server actions
-open link: https://nextjs.org/docs/14/app/building-your-application/data-fetching/server-actions-and-mutations
-in folder lib create actions.ts file
-in actions.ts file create and export async function getProductBySlug()
-open route: http://localhost:3000

42. Dynamic routes - product page
-open link: https://nextjs.org/docs/app/api-reference/file-conventions/dynamic-routes
-open link: https://nextjs.org/docs/app/api-reference/functions/not-found
-create folders product, [slug] and component page.tsx
-in component [slug]/page.tsx create and export function ProductPage()
-add to function ProductPage() parameter destructured prop with type
-import functions getProductBySlug, notFound and formatPrice
-invoke function await params()
-create variable const product
-add condition if (!product)
-in jsx create HTML elements with Tailwind CSS classes for displaying product data
-in component product-card.tsx import component Link
-in jsx wrap component Card with component Link
-open route: http://localhost:3000/product/[slug]
-open route: http://localhost:3000/product/test

43. 404 Custom page
-in folder [slug] create component not-found.tsx
-in component not-found.tsx create and export function NotFound() as default
-open route: http://localhost:3000/product/[slug]
-open route: http://localhost:3000/product/test

44. Loading category & improving product page UI
-open link: https://ui.shadcn.com/docs/components/separator
-type command: npx shadcn@latest add separator
-in actions.ts file add object include
-open route: http://localhost:3000/product/[slug]

45. Loading state for product
-in folder [slug] create component loading.tsx
-in utils.ts file create and export async function sleep()
-in components app/page.tsx and [slug]/page.tsx import and invoke function sleep()
-open route: http://localhost:3000
-open route: http://localhost:3000/product/[slug]

46. Adding metadata and SEO optimization
-open link: https://nextjs.org/docs/app/getting-started/metadata-and-og-images
-in component [slug]/page.tsx create and export async function generateMetadata()
-open route: http://localhost:3000
-open route: http://localhost:3000/product/[slug]

47. Product page with images
-in component [slug]/page.tsx import component Image
-in jsx add conditional rendering product.image &&
-open route: http://localhost:3000
-open route: http://localhost:3000/product/[slug]

48. Adding product inventory
-in schema.prisma file add to model Product property inventory
-type command: npx prisma migrate dev --name add_product_inventory
-update seed.ts file
-type command: npm run seed
-type command: npx prisma studio
-open route: http://localhost:5555

49. Product inventory UI and image fix
-in component [slug]/page.tsx add ternary condition for product.inventory > 0 
-fix div element to display image on small screen
-open route: http://localhost:3000/product/[slug]

50. Add to cart placeholder
-in component [slug]/page.tsx import components Button and ShoppingCart
-in jsx add div element for displaying Add to cart button
-open route: http://localhost:3000/product/[slug]

51. Summary



Section 07: Navigation layout enhancements


52. Dark and light mode: Next themes
-open link: https://ui.shadcn.com/docs/dark-mode/next
-in folder components create folder theme and component theme-provider.tsx
-in component theme-provider.tsx add code from documentation
-in component layout.tsx import component ThemeProvider from component theme-provider.tsx
-open route: http://localhost:3000

53. Implementing theme toggle
-open link: https://ui.shadcn.com/docs/components/dropdown-menu
-type command: npx shadcn@latest add dropdown-menu
-in folder theme create component theme-toggle.tsx
-in component theme-toggle.tsx add code from documentation
-in component layout.tsx import component ThemeToggle from component theme-toggle.tsx
-open route: http://localhost:3000

54. Adding navigation bar
-in folder components create folder shared and component navbar.tsx
-in component navbar.tsx, in jsx create HTML elements with Tailwind CSS classes
-in component layout.tsx import component Navbar from component navbar.tsx
-open route: http://localhost:3000

55. Adding icons to navigation bar
-in component navbar.tsx, in jsx create div element with Tailwind CSS classes
-import component Button and ThemeToggle
-import React icons Search and ShoppingCart from package lucide-react
-in component theme-toggle update prop variant
-open route: http://localhost:3000

56. Mobile only navigation menu - explained

57. Creating the mobile navigation using Sheet
-open link: https://ui.shadcn.com/docs/components/sheet
-type command: npx shadcn@latest add sheet
-in folder shared create component mobile-nav.tsx
-in component mobile-nav.tsx import components Sheet and SheetTrigger from component ui/sheet.tsx
-in component navbar.tsx import component MobileNav from component mobile-nav.tsx
-open route: http://localhost:3000

58. Mobile navigation content
-in component mobile-nav.tsx import remaining components from component sheet.tsx
-open route: http://localhost:3000

59. Adding footer and fixing layout issues
-in folder shared create component footer.tsx
-in component layout.tsx import component Footer from component footer.tsx
-open route: http://localhost:3000

60. Improving navigation with breadcrumbs
-open link: https://ui.shadcn.com/docs/components/breadcrumb
-type command: npx shadcn@latest add breadcrumb
-in folder shared create component breadcrumbs.tsx
-in component breadcrumbs.tsx import breadcrumbs components from component breadcrumb.tsx
-in component app/page.tsx import component Breadcrumbs from component breadcrumbs.tsx
-in component [slug]/page.tsx import component Breadcrumbs from component breadcrumbs.tsx
-open route: http://localhost:3000
-open route: http://localhost:3000/products
-open route: http://localhost:3000/product/[slug]

61. Fixing layout issues & adding breadcrumbs skeleton
-in folder shared create component breadcrumbs-skeleton.tsx
-in components app/loading.tsx and [slug]/loading.tsx import component BreadcrumbsSkeleton from component breadcrumbs-skeleton.tsx
-open route: http://localhost:3000
-open route: http://localhost:3000/product/[slug]

62. Summary



Section 08: Search feature


63. How search will work ?
-open link: https://ui.shadcn.com/docs/components/input
-type command: npx shadcn@latest add input